<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bbyiya.dao.ULoginlogsMapper" >
  <resultMap id="BaseResultMap" type="com.bbyiya.model.ULoginlogs" >
    <id column="LogId" property="logid" jdbcType="BIGINT" />
    <result column="UserId" property="userid" jdbcType="BIGINT" />
    <result column="NickName" property="nickname" jdbcType="VARCHAR" />
    <result column="LoginTime" property="logintime" jdbcType="TIMESTAMP" />
    <result column="LoginType" property="logintype" jdbcType="INTEGER" />
    <result column="IpStr" property="ipstr" jdbcType="VARCHAR" />
    <result column="SourceType" property="sourcetype" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    LogId, UserId, NickName, LoginTime, LoginType, IpStr, SourceType
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from u_loginlogs
    where LogId = #{logid,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from u_loginlogs
    where LogId = #{logid,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.bbyiya.model.ULoginlogs" >
    insert into u_loginlogs (LogId, UserId, NickName, 
      LoginTime, LoginType, IpStr, 
      SourceType)
    values (#{logid,jdbcType=BIGINT}, #{userid,jdbcType=BIGINT}, #{nickname,jdbcType=VARCHAR}, 
      #{logintime,jdbcType=TIMESTAMP}, #{logintype,jdbcType=INTEGER}, #{ipstr,jdbcType=VARCHAR}, 
      #{sourcetype,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.bbyiya.model.ULoginlogs" >
    insert into u_loginlogs
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="logid != null" >
        LogId,
      </if>
      <if test="userid != null" >
        UserId,
      </if>
      <if test="nickname != null" >
        NickName,
      </if>
      <if test="logintime != null" >
        LoginTime,
      </if>
      <if test="logintype != null" >
        LoginType,
      </if>
      <if test="ipstr != null" >
        IpStr,
      </if>
      <if test="sourcetype != null" >
        SourceType,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="logid != null" >
        #{logid,jdbcType=BIGINT},
      </if>
      <if test="userid != null" >
        #{userid,jdbcType=BIGINT},
      </if>
      <if test="nickname != null" >
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="logintime != null" >
        #{logintime,jdbcType=TIMESTAMP},
      </if>
      <if test="logintype != null" >
        #{logintype,jdbcType=INTEGER},
      </if>
      <if test="ipstr != null" >
        #{ipstr,jdbcType=VARCHAR},
      </if>
      <if test="sourcetype != null" >
        #{sourcetype,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.bbyiya.model.ULoginlogs" >
    update u_loginlogs
    <set >
      <if test="userid != null" >
        UserId = #{userid,jdbcType=BIGINT},
      </if>
      <if test="nickname != null" >
        NickName = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="logintime != null" >
        LoginTime = #{logintime,jdbcType=TIMESTAMP},
      </if>
      <if test="logintype != null" >
        LoginType = #{logintype,jdbcType=INTEGER},
      </if>
      <if test="ipstr != null" >
        IpStr = #{ipstr,jdbcType=VARCHAR},
      </if>
      <if test="sourcetype != null" >
        SourceType = #{sourcetype,jdbcType=INTEGER},
      </if>
    </set>
    where LogId = #{logid,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bbyiya.model.ULoginlogs" >
    update u_loginlogs
    set UserId = #{userid,jdbcType=BIGINT},
      NickName = #{nickname,jdbcType=VARCHAR},
      LoginTime = #{logintime,jdbcType=TIMESTAMP},
      LoginType = #{logintype,jdbcType=INTEGER},
      IpStr = #{ipstr,jdbcType=VARCHAR},
      SourceType = #{sourcetype,jdbcType=INTEGER}
    where LogId = #{logid,jdbcType=BIGINT}
  </update>
</mapper>